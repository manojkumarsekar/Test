package com.eastspring.tom.cart.core.svc;

import com.eastspring.tom.cart.core.CartCoreTestConfig;
import com.eastspring.tom.cart.core.CartException;
import org.apache.poi.ss.usermodel.*;
import org.joda.time.DateTime;
import org.junit.*;
import org.junit.rules.ExpectedException;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.FileInputStream;
import java.util.Date;
import java.util.Iterator;

import static com.eastspring.tom.cart.core.svc.ExcelFileSvc.GET_CELL_PROCESSING_FAILED;
import static org.hamcrest.CoreMatchers.instanceOf;
import static org.mockito.Mockito.when;

public class ExcelFileSvcTest {

    @InjectMocks
    private ExcelFileSvc excelFileSvc;

    @Mock
    private Sheet sheet;

    @Mock
    private Row row;

    @Mock
    private Cell cell;

    @Mock
    private Iterator<Cell> cellIterator;

    @Mock
    private RichTextString richTextString;

    @Mock
    private Workbook workbook;

    @Mock
    private CreationHelper creationHelper;

    @Mock
    private FormulaEvaluator formulaEvaluator;

    @Mock
    private FileInputStream fileInputStream;

    @Rule
    public ExpectedException thrown = ExpectedException.none();


    @Before
    public void initMocks() {
        MockitoAnnotations.initMocks(this);
    }

    @BeforeClass
    public static void setUpClass() {
        CartCoreTestConfig.configureLogging(ExcelFileSvcTest.class);
    }

    @Test
    public void testGetValueAtRow_nullRow() throws Exception {
        when(sheet.getRow(3)).thenReturn(null);
        String result = excelFileSvc.getValueAtRowCol(sheet, 3, 5);
        Assert.assertNull(result);
    }

    @Test
    public void testGetValueAtRow_nullCell() throws Exception {
        when(sheet.getRow(3)).thenReturn(row);
        when(row.getCell(5)).thenReturn(null);
        String result = excelFileSvc.getValueAtRowCol(sheet, 3, 5);
        Assert.assertNull(result);
    }

    @Test
    public void testGetValueAtRow_String() throws Exception {
        when(sheet.getRow(3)).thenReturn(row);
        when(row.getCell(5)).thenReturn(cell);
        when(cell.getCellTypeEnum()).thenReturn(CellType.STRING);
        when(cell.getRichStringCellValue()).thenReturn(richTextString);
        when(richTextString.getString()).thenReturn("ABC");
        String result = excelFileSvc.getValueAtRowCol(sheet, 3, 5);
        Assert.assertEquals("ABC", result);
    }

    @Test
    public void testGetValueAtRow_Numeric() throws Exception {
        when(sheet.getRow(3)).thenReturn(row);
        when(row.getCell(5)).thenReturn(cell);
        when(cell.getCellTypeEnum()).thenReturn(CellType.NUMERIC);
        when(cell.getNumericCellValue()).thenReturn(-0.5092D);
        String result = excelFileSvc.getValueAtRowCol(sheet, 3, 5);
        Assert.assertEquals("-0.509200", result);
    }

    @Test
    public void testGetValueAtRow_Formula1() throws Exception {
        CellValue cellValue = new CellValue(2389285.952840938249D);
        when(sheet.getRow(3)).thenReturn(row);
        when(row.getCell(5)).thenReturn(cell);
        when(cell.getCellTypeEnum()).thenReturn(CellType.FORMULA);
        when(cell.getSheet()).thenReturn(sheet);
        when(sheet.getWorkbook()).thenReturn(workbook);
        when(workbook.getCreationHelper()).thenReturn(creationHelper);
        when(creationHelper.createFormulaEvaluator()).thenReturn(formulaEvaluator);
        when(formulaEvaluator.evaluate(cell)).thenReturn(cellValue);
        String result = excelFileSvc.getValueAtRowCol(sheet, 3, 5);
        Assert.assertEquals("2389285.952841", result);
    }

    @Test
    public void testGetValueAtRow_Formula2() throws Exception {
        CellValue cellValue = new CellValue("This is generated by formula: 2389285.952840938249D");
        when(sheet.getRow(3)).thenReturn(row);
        when(row.getCell(5)).thenReturn(cell);
        when(cell.getCellTypeEnum()).thenReturn(CellType.FORMULA);
        when(cell.getSheet()).thenReturn(sheet);
        when(sheet.getWorkbook()).thenReturn(workbook);
        when(workbook.getCreationHelper()).thenReturn(creationHelper);
        when(creationHelper.createFormulaEvaluator()).thenReturn(formulaEvaluator);
        when(formulaEvaluator.evaluate(cell)).thenReturn(cellValue);
        String result = excelFileSvc.getValueAtRowCol(sheet, 3, 5);
        Assert.assertEquals("This is generated by formula: 2389285.952840938249D", result);
    }

    @Test
    public void testGetValueAtRow_Blank() throws Exception {
        when(sheet.getRow(3)).thenReturn(row);
        when(row.getCell(5)).thenReturn(cell);
        when(cell.getCellTypeEnum()).thenReturn(CellType.BLANK);
        String result = excelFileSvc.getValueAtRowCol(sheet, 3, 5);
        Assert.assertEquals("", result);
    }

    @Test
    public void testGetValueAtRow_Boolean() throws Exception {
        when(sheet.getRow(3)).thenReturn(row);
        when(row.getCell(5)).thenReturn(cell);
        when(cell.getCellTypeEnum()).thenReturn(CellType.BOOLEAN);
        when(cell.getStringCellValue()).thenReturn("TRUE");
        String result = excelFileSvc.getValueAtRowCol(sheet, 3, 5);
        Assert.assertEquals("TRUE", result);
    }

    @Test
    public void testGetValueAtRow_Error() throws Exception {
        when(sheet.getRow(3)).thenReturn(row);
        when(row.getCell(5)).thenReturn(cell);
        when(cell.getCellTypeEnum()).thenReturn(CellType.ERROR);
        String result = excelFileSvc.getValueAtRowCol(sheet, 3, 5);
        Assert.assertEquals("<ERROR>", result);
    }

    @Test(expected = CartException.class)
    public void testGetValueAtRow_null() throws Exception {
        when(sheet.getRow(3)).thenReturn(row);
        when(row.getCell(5)).thenReturn(cell);
        when(cell.getCellTypeEnum()).thenReturn(null);
        excelFileSvc.getValueAtRowCol(sheet, 3, 5);
    }

    @Test
    public void getCellValueAsDate_nullCell() throws Exception {
        String result = excelFileSvc.getCellValueAsDate(null);
        Assert.assertNull(result);
    }

    @Test
    public void getCellValueAsDate_nullDateCellValue() throws Exception {
        when(cell.getDateCellValue()).thenReturn(null);
        String result = excelFileSvc.getCellValueAsDate(cell);
        Assert.assertNull(result);
    }

    @Test
    public void getCellValueAsDate_dateValue() throws Exception {
        Date date = DateTime.parse("2018-03-20T11:35:45.985+0800").toDate();
        when(cell.getDateCellValue()).thenReturn(date);
        String result = excelFileSvc.getCellValueAsDate(cell);
        Assert.assertEquals("2018-03-20", result);
    }

    @Test
    public void verifyRowColEquals_null() throws Exception {
        when(sheet.getRow(3)).thenReturn(null);
        boolean result = excelFileSvc.verifyRowColEquals(sheet, 3, 5, "ABC");
        Assert.assertFalse(result);
    }

    @Test
    public void verifyRowColEquals_exactMatch() throws Exception {
        when(sheet.getRow(3)).thenReturn(row);
        when(row.getCell(5)).thenReturn(cell);
        when(cell.getCellTypeEnum()).thenReturn(CellType.STRING);
        when(cell.getRichStringCellValue()).thenReturn(richTextString);
        when(richTextString.getString()).thenReturn("ABC");
        boolean result = excelFileSvc.verifyRowColEquals(sheet, 3, 5, "ABC");
        Assert.assertTrue(result);
    }

    @Test
    public void testGetCell_success() {
        when(sheet.getRow(1)).thenReturn(row);
        when(row.getCell(1)).thenReturn(cell);
        Cell cell = excelFileSvc.getCell(sheet, 1, 1);
        Assert.assertThat(cell, instanceOf(Cell.class));
    }

    @Test
    public void testGetCell_withException() {
        thrown.expect(CartException.class);
        thrown.expectMessage(GET_CELL_PROCESSING_FAILED);
        when(sheet.getRow(1)).thenReturn(null);
        excelFileSvc.getCell(sheet, 1, 1);
    }

    @Test
    public void testGetColumnNumber() {
        when(sheet.getRow(1)).thenReturn(row);
        when(cell.getCellTypeEnum()).thenReturn(CellType.STRING);
        when(cell.getRichStringCellValue()).thenReturn(richTextString);
        when(richTextString.getString()).thenReturn("ABC");
        when(excelFileSvc.getCellValueAsString(cell)).thenReturn("Test");
        when(cell.getColumnIndex()).thenReturn(1);
        when(row.cellIterator()).thenReturn(cellIterator);
        when(cellIterator.hasNext()).thenReturn(true);
        when(cellIterator.next()).thenReturn(cell);
        int columnNum = excelFileSvc.getColumnNumber(sheet, 1, "Test");
        Assert.assertEquals(1, columnNum);
    }


}
